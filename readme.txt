Это учебный проект, который разрабатывается при прохождении курса от JuJa.

Описание задачи:
Это консольное приложение, которое позволяет работать с СУБД при помощи выполнения команд, введённые в консоль. Основные возможности: подключение к БД; CRUD функции с данными; добавление, удаление и получение списка таблиц, отображение списка существующих команд и выход из программы.

Описание архитектуры:
1. К проекту приложена диаграмма классов, которая в общих чертах описывает взаимосвязь объектов системы.
2. Проект запускается классом Run, в котором сразу указываются все параметры для работы системы (представление для отображения данных и настройки подключения к БД).
3. Основной цикл работы программы находится в классе Main, метод doMainWork. Цикл выполняется до тех пор, пора пользователь не введёт команду выхода.
4. В основном цикле программы мы получаем через консоль команду от пользователя, затем определяем тип команды и получаем её экземпляр в виде абстрактного класса Command. После выполняем действие, принадлежащее команде и выводим в консоль результат выполнения команды.
5. Обработка исключений вынесена в метод processingException класса Main.
6. Каждой команде для выполнения передаётся ConnectionConfig, который содержит указатель на подключение к БД и текст запросов в формате конкретной СУБД (указывается в конструкторе класса Main).
7. Классы пакета view служат для взаимодействия пользователя с системой - это ввод команд и отображение результата их выполнения.
8. В пакете query находятся классы, которые отвечают за получение текста запросов для выполнения команд. Т.е. команда перед выполнением запрашивает у Queriable текст запроса.
9. В программе используется некоторые пользовательские исключения, которые расположены в пакете exceptions.
10. Пакет data содержит классы и интерфейс для работы с СУБД. Классы были спроектированы так, что система может подключаться к различным СУБД: MySQL, MS SQL и PostgreSQL, для них нужно только написать тексты запросов. С помощью фабрики классов JDBCConnectableFactory можно получить интерфейс для подключения к СУБД с настройками уже внутри.
11. Пакет command содержит команды и типы, необходимые для работы с первыми. 
Перечисление CommandTypes содержит в себе перечень команд с их реализацией, проверкой на корректность параметров и описания команды. Использование перечислений позволяет легко получаться список команд. При проектировании решения было решено не реализовывать весь функционал команды (логика выполнения команды, проверка параметров и описание команды) в одном классе, так как это ухудшило бы читаемость кода, а конкретно кода логики выполнения команды. Поэтому для выполнения трёх вышеуказанных задач были созданы три интерфейса Performable (логика команды), Checkable (логика проверки корректности параметров) и Notationable (описание команды). Все они содержаться в классе Command, который реализует паттерн декоратор, и вызывает их методы.
12. Фабрика классов CommandCheckFactory возвращает абстрактный класс, который реализует логику проверки параметров команды Checkable.
13. Фабрика классов CommandNotationFactory возвращает абстрактный класс, который возвращает описание команды (Notationable).
14. В итоге Command содержит в себе Checkable, Notationable и Performable, а также реализует все три интерфейса вызывая реализацию этих интерфейсов, переданную в конструктор.

Примечание: система реализована достаточно большим количеством интерфейсов и классов для размера такого приложения, но автор надеется, что у него максимально получить выполнить поставленную им задачу при проектировании её: легкое расширение функционала приложения, в частности добавления команд. Сейчас для добавления новой команды достаточно дописать в CommandTypes новую команду, реализовать интерфейс Perfomable, добавить метод получения Checkable и Notationable, и если необходимо, то добавить новый текст запроса в интерфейс Querable и классы, которые его реализуют.